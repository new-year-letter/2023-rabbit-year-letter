# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
      
    steps:
    # 1. Preparing the groundwork for deployment
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    # 2. Install or browse dependency for building
    - name: Cache node modules
      id: node-cache
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Browse Secret Keys for using in Node.js
      run: |
        echo "REACT_APP_API_URL=${{ secrets.AWS_EC2_URL }}" >> .env
        
    - name: Install Dependencis
      if: steps.node-cache.outputs.cache-hit != 'true'
      run: npm install

    # 3. Build React Project
    - name: Build project
      run: CI=false npm run build --if-present
      
    # 4. Upload and deploy to AWS Cloud
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }} 
        aws-region: ${{ secrets.AWS_REGION }} 
    
    - name: Synchronize /build to S3
      env:
        BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws s3 sync --region $REGION build s3://$BUCKET_NAME --delete
    
    - name: Invalidate CloudFront Cache 
      env:
        DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
      run: |
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        
